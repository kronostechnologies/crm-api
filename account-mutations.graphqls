enum EWSProvider {
	OUTLOOK,
	OFFICE365
}


#
# --- FRAGMENTS
input CreateRemoteAccountCredentialsInput {
	userLogin: String!,
	userPassword: String!
}

input AlterRemoteAccountCredentialsInput {
	userLogin: String,
	userPassword: String
}

input CreateRemoteAccountHostInput {
	host: String!,
	port: Number!
}

input AlterRemoteAccountHostInput {
	host: String,
	port: Number
}


#
# --- REMOTE ACCOUNT CREATION
input ContactServiceInput {
	enabled: bool!,

	# Defaults to true.
	syncAddresses: bool,

	# Defaults to true.
	syncEmails: bool,

	# Defaults to true.
	syncPhones: bool
}

input CreateEWSMailServiceInput {
	enabled: bool!,
	imapCredentials: CreateRemoteAccountCredentialsInput!,
	imapHost: CreateRemoteAccountHostInput!
	# ToDo: Check. SMTP is set from remote account host, username, password. What about encryption & port?
}

input AlterEWSMailServiceInput {
	enabled: bool!,
	imapCredentials: AlterRemoteAccountCredentialsInput,
	imapHost: AlterRemoteAccountHostInput
	# ToDo: Check. SMTP is set from remote account host, username, password. What about encryption & port?
}

input CreateEWSProviderMailServiceInput {
	enabled: bool!,
	imapCredentials: CreateRemoteAccountCredentialsInput!
	# ToDo: Check. Same at last. SMTP is set from remote account username, password. Host, encryption, and ports are forced by provider.
}

input AlterEWSProviderMailServiceInput {
	enabled: bool!,
	imapCredentials: AlterRemoteAccountCredentialsInput
	# ToDo: Check. Same at last. SMTP is set from remote account username, password. Host, encryption, and ports are forced by provider.
}

input CreateRemoteAccountBaseInfoInput {
	# Sort priority. Defaults to last item in list.
	priority: Number,
	# Is main account. Defaults to false, but will be set to true if no other account is able to be a main account but this one can.
	main: bool,
	displayName: String!,
	description: String,
	ownerId: ID!,
	replyTo: String! # ToDo: Check. Mandatory: the local mail server uses this as the sender's email.
	# ToDo: Check. email field... email === replyTo?
}

input AlterRemoteAccountBaseInfoInput {
	# Sort priority. Defaults to last item in list.
	priority: Number,
	# Is main account. Defaults to false, but will be set to true if no other account is able to be a main account but this one can.
	main: bool,
	displayName: String,
	description: String,
	ownerId: ID,
	replyTo: String # ToDo: Check. Mandatory: the local mail server uses this as the sender's email.
	# ToDo: Check. email field... email === replyTo?
}

input AgendaServiceInput {
	enabled: bool!,

	# Defaults to true.
	invitationEnabled: bool
}

input CreateGetmailSmtpAccountInput {
	remoteUser: String!,
	smtpCredentials: CreateRemoteAccountCredentialsInput!
}

input CreateGoogleRemoteAccountRequest {
	clientMutationId: String,

	username: String!,
	refreshToken: String!, # ToDo: Check. Right format for this account's OAuth info? More descriptive name?

	baseInfo: CreateRemoteAccountBaseInfoInput!
}

input CreateEWSRemoteAccountRequest {
	clientMutationId: String,

	ewsCredentials: CreateRemoteAccountCredentialsInput!,
	ewsHost: CreateRemoteAccountHostInput!,
	isSsl: Boolean!,

	baseInfo: CreateRemoteAccountBaseInfoInput!,

	contactService: ContactServiceInput!,
	mailService: CreateEWSMailServiceInput!,
	agendaService: AgendaServiceInput!
}

input CreateEWSProviderRemoteAccountRequest {
	clientMutationId: String,

	ewsCredentials: CreateRemoteAccountCredentialsInput!,
	ewsProvider: EWSProvider!,

	baseInfo: CreateRemoteAccountBaseInfoInput!,
	
	contactService: ContactServiceInput!,
	mailService: CreateEWSProviderMailServiceInput!,
	agendaService: AgendaServiceInput!
}

input CreateGetmailRemoteAccountRequest {
	clientMutationId: String,

	imapCredentials: CreateRemoteAccountCredentialsInput!,
	smtpAccount: CreateGetmailSmtpAccountInput # ToDo: Check. If null, legacy Getmail will be used instead.
}

input AlterEWSRemoteAccountContactServiceRequest {
	clientMutationId: String,

	remoteAccountId: ID!,
	contactService: ContactServiceInput!
}

input AlterEWSRemoteAccountMailServiceRequest {
	clientMutationId: String,

	remoteAccountId: ID!,
	mailService: AlterEWSMailServiceInput!
}

input AlterEWSProviderRemoteAccountMailServiceRequest {
	clientMutationId: String,

	remoteAccountId: ID!,
	mailService: AlterEWSProviderMailServiceInput!
}

input AlterEWSRemoteAccountAgendaServiceRequest {
	clientMutationId: String,

	remoteAccountId: ID!,
	agendaService: AgendaServiceInput!	
}

input AlterEWSRemoteAccountConnectionInfoRequest {
	clientMutationId: String,

	remoteAccountId: ID!,
	connectionInfo: ConnectionInfoInput!
}

input AlterRemoteAccountBaseInfoRequest {
	clientMutationId: String,

	remoteAccountId: ID!,
	baseInfo: AlterRemoteAccountBaseInfoInput!
}

type CreateRemoteAccountResponse {
	clientMutationId: String

	# remoteAccount: RemoteAccount
}

type DeleteRemoteAccountResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# True if account deletion succeeded.
	success: bool!
}


#
# -- MUTATIONS
type Mutation {
	createGoogleRemoteAccount(input: CreateGoogleRemoteAccountRequest!): CreateRemoteAccountResponse!,

	createEWSRemoteAccount(input: CreateEWSRemoteAccountRequest!): CreateRemoteAccountResponse!,

	createEWSProviderRemoteAccount(input: CreateEWSProviderRemoteAccountRequest!): CreateRemoteAccountResponse!,

	createGetmailRemoteAccount(input: CreateGetmailRemoteAccountRequest!): CreateRemoteAccountResponse!,


	deleteRemoteAccount(input: DeleteRemoteAccountRequest!): DeleteRemoteAccountResponse!,


	alterEWSRemoteAccountContactService(input: AlterEWSRemoteAccountContactServiceRequest!): UpdateRemoteAccountResponse!,

	alterEWSRemoteAccountMailService(input: AlterEWSRemoteAccountMailServiceRequest!): UpdateRemoteAccountResponse!,

	alterEWSProviderRemoteAccountMailService(input: AlterEWSProviderRemoteAccountMailServiceRequest!): UpdateRemoteAccountResponse!,

	alterEWSRemoteAccountAgendaService(input: AlterEWSRemoteAccountAgendaServiceRequest!): UpdateRemoteAccountResponse!,

	alterEWSRemoteAccountConnectionInfo(input: AlterEWSRemoteAccountConnectionInfoRequest!): UpdateRemoteAccountResponse!,

	alterEWSRemoteAccountCredentials(input: AlterEWSRemoteAccountCredentialsRequest!): UpdateRemoteAccountResponse!,

	alterEWSRemoteAccountHost(input: AlterEWSRemoteAccountHostRequest!): UpdateRemoteAccountResponse!,


	# Sets a remote account as the main account for its owner.
	setMainRemoteAccount(input: SetMainRemoteAccountInput!): UpdateRemoteAccountResponse,

	# Sets the sort value for one or many accounts for a user.  All accounts must belong to the same user. Returns the final sort values for all user accounts.
	sortRemoteAccounts(input: SortRemoteAccountsInput!): SortRemoteAccountsResponse
}