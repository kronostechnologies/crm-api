enum EWSProvider {
	OUTLOOK,
	OFFICE365
}

enum SmtpEncryptionTypes {
	NONE,
	TLS,
	SSL
}

enum GetmailAccountType {
	POP3,
	POP3SSl,
	IMAP,
	IMAPSSL
}


#
# --- QUERY

type AgendaService {
	# True if the agenda account is enabled.
	enabled: Boolean!,

	# True if invitations management is enabled.
	invitationEnabled: Boolean!
}

type ContactService {
	# True if the contact account is enabled.
	enabled: Boolean!,

	# True if the contact addresses are to be synced with the local CRM data.
	syncAddresses: Boolean!,

	# True if the contact emails are to be synced with the local CRM data.
	syncEmails: Boolean!,

	# True if the contact phones are to be synced with the local CRM data.
	syncPhones: Boolean!
}

type RemoteAccountHost {
	# Hostname.
	host: String!,

	# Host port.
	port: Int!
}

type GetmailService {
	# True if Getmail is enabled for the mail account.
	enabled: Boolean!,

	# Getmail account type.
	type: GetmailAccountType,

	# True if Getmail deletes mail remotely.
	remoteDelete: Boolean,

	# Time in days before Getmail deletes mail remotely.
	remoteDeleteAfter: Int,

	# True if Getmail also acts as a spam filter.
	filterSpam: Boolean,
}

# Mail service information. It does not contain passwords for security reasons.
type MailService {
	# True if the mail account is enabled.
	enabled: Boolean!,

	# IMAP username.
	imapUsername: String!,

	# Host & port for the connection to IMAP.
	imapHost: RemoteAccountHost!,

	# SMTP username. Can be null.
	smtpUsername: String,

	# SMTP host & port. Can be null.
	smtpHost: RemoteAccountHost,

	# SMTP encryption. Can be null.
	smtpEncryption: SmtpEncryptionTypes,

	# Getmail service status for the mail account.
	getmailService: GetmailService!,

	# True if the SPF record is valid.
	hasSpf: Boolean!
}

# Mail service information without hosts. It does not contain passwords for security reasons.
type HostlessMailService {
	# True if the mail account is enabled.
	enabled: Boolean!,

	# IMAP username.
	imapUsername: String!,

	# SMTP username. Can be null.
	smtpUsername: String,

	# True if the SPF record is valid.
	hasSpf: Boolean!
}

interface Node {
	id: ID!
}

type User implements Node {
	id: ID!
}

type RemoteAccountBaseInfo {
	# Sort order priority of the remote account. Accounts are displayed in ascending order.
	priority: Int!,

	# True if the remote account is currently the main one.
	main: Boolean!,

	# Display name for the remote account.
	userDisplayName: String!,

	# Description provided for the remote account.
	description: String!,

	# Webuser owner of this remote account.
	owner: User!,

	# Email used as the source when sending emails.
	replyTo: String!
}

interface RemoteAccount implements Node {
	# Base information for the remote account.
	baseInfo: RemoteAccountBaseInfo!
}

type GoogleRemoteAccount implements RemoteAccount {
	id: ID!,

	# Base information for the remote account.
	baseInfo: RemoteAccountBaseInfo,

	# Username provided for OAuth.
	username: String!,

	# Last refresh token provided by OAuth.
	refreshToken: String
}

type EWSRemoteAccount implements RemoteAccount {
	id: ID!,

	# Base information for the remote account.
	baseInfo: RemoteAccountBaseInfo,

	# Contact service data for the EWS account.
	contactService: ContactService!,

	# Mail service data for the EWS account.
	mailService: MailService!,

	# Agenda service for the EWS account.
	agendaService: AgendaService!
}

type EWSProviderRemoteAccount implements RemoteAccount {
	id: ID!,

	# Base information for the remote account.
	baseInfo: RemoteAccountBaseInfo,

	# Contact service data for the EWS account.
	contactService: ContactService!,

	# Mail service data for the EWS account.
	mailService: HostlessMailService!,

	# Agenda service for the EWS account.
	agendaService: AgendaService!
}

type GetmailRemoteAccount implements RemoteAccount {
	id: ID!,

	# Base information for the remote account.
	baseInfo: RemoteAccountBaseInfo
}


#
# --- FRAGMENTS
input CreateRemoteAccountCredentialsInput {
	# Username
	userLogin: String!,

	# Password
	userPassword: String!
}

input AlterRemoteAccountCredentialsInput {
	# Username
	userLogin: String,

	# Password
	userPassword: String
}

input CreateRemoteAccountHostInput {
	# Hostname
	host: String!,

	# Port
	port: Int!
}

input AlterRemoteAccountHostInput {
	# Hostname
	host: String,

	# Port
	port: Int
}


#
# --- REMOTE ACCOUNT CREATION
input ContactServiceInput {
	# True if the contact service is to be enabled.
	enabled: bool!,

	# True if the contact addresses are to be synced with the local CRM data. Defaults to true.
	syncAddresses: bool,

	# True if the contact addresses are to be synced with the local CRM data. Defaults to true.
	syncEmails: bool,

	# True if the contact addresses are to be synced with the local CRM data. Defaults to true.
	syncPhones: bool
}

input CreateEWSMailServiceInput {
	# True if the mail service is to be enabled.
	enabled: bool!,

	# IMAP credentials data.
	imapCredentials: CreateRemoteAccountCredentialsInput!,

	# Host & port for the connection to IMAP.
	imapHost: CreateRemoteAccountHostInput!
	# ToDo: Check. SMTP is set from remote account host, username, password. What about encryption & port?
}

input AlterEWSMailServiceInput {
	# True if the mail service is to be enabled.
	enabled: bool!,

	# IMAP credentials data.
	imapCredentials: AlterRemoteAccountCredentialsInput,

	# Host & port for the connection to IMAP.
	imapHost: AlterRemoteAccountHostInput
	# ToDo: Check. SMTP is set from remote account host, username, password. What about encryption & port?
}

input CreateEWSProviderMailServiceInput {
	# True if the mail service is to be enabled for this mail account.
	enabled: bool!,

	# IMAP credentials data.
	imapCredentials: CreateRemoteAccountCredentialsInput!
	# ToDo: Check. Same at last. SMTP is set from remote account username, password. Host, encryption, and ports are forced by provider.
}

input AlterEWSProviderMailServiceInput {
	# True if the mail service is to be enabled.
	enabled: bool!,

	# IMAP credentials data.
	imapCredentials: AlterRemoteAccountCredentialsInput
	# ToDo: Check. Same at last. SMTP is set from remote account username, password. Host, encryption, and ports are forced by provider.
}

input CreateRemoteAccountBaseInfoInput {
	# Sort priority. Defaults to last item in list.
	priority: Int,

	# Is main account. Defaults to false, but will be set to true if no other account is able to be a main account but this one can.
	main: bool,

	# Display name for the remote account.
	userDisplayName: String!,

	# Description provided for the remote account.
	description: String,

	# Webuser owner ID.
	ownerId: ID!,

	# Email used as the source when sending emails.
	replyTo: String! # ToDo: Check. Mandatory: the local mail server uses this as the sender's email.
	# ToDo: Check. email field... email === replyTo?
}

input AlterRemoteAccountBaseInfoInput {
	# Sort priority. Defaults to last item in list.
	priority: Int,

	# Is main account. Defaults to false, but will be set to true if no other account is able to be a main account but this one can.
	main: bool,

	# Display name for the remote account.
	userDisplayName: String,

	# Description provided for the remote account.
	description: String,

	# Webuser owner ID. Unmodified if not filled.
	ownerId: ID,

	# Email used as the source when sending emails.
	replyTo: String # ToDo: Check. Mandatory: the local mail server uses this as the sender's email.
	# ToDo: Check. email field... email === replyTo?
}

input AgendaServiceInput {
	# True is the agenda service is to be enabled.
	enabled: bool!,

	# Defaults to true.
	invitationEnabled: bool
}

input CreateGetmailSmtpAccountInput {
	# Remote user string for the SMTP.
	remoteUser: String!,

	# SMTP credentials data.
	smtpCredentials: CreateRemoteAccountCredentialsInput!
}

input CreateGoogleRemoteAccountRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Username provided for OAuth.
	username: String!,

	# Last refresh token provided by OAuth.
	refreshToken: String!, # ToDo: Check. Right format for this account's OAuth info? More descriptive name?

	# Base information for the remote account.
	baseInfo: CreateRemoteAccountBaseInfoInput!
}

input CreateEWSRemoteAccountRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Credentials to the EWS server.
	ewsCredentials: CreateRemoteAccountCredentialsInput!,

	# Host data to the EWS server.
	ewsHost: CreateRemoteAccountHostInput!,

	# True if SSL is required by the EWS host.
	isSsl: Boolean!,

	# Base information for the remote account.
	baseInfo: CreateRemoteAccountBaseInfoInput!,

	# Contact service data for the EWS account.
	contactService: ContactServiceInput!,

	# Mail service data for the EWS account.
	mailService: CreateEWSMailServiceInput!,

	# Agenda service for the EWS account.
	agendaService: AgendaServiceInput!
}

input CreateEWSProviderRemoteAccountRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Credentials to the EWS server.
	ewsCredentials: CreateRemoteAccountCredentialsInput!,

	# EWS host provider.
	ewsProvider: EWSProvider!,

	# Base information for the remote account.
	baseInfo: CreateRemoteAccountBaseInfoInput!,
	
	# Contact service data for the EWS account.
	contactService: ContactServiceInput!,

	# Mail service data for the EWS account.
	mailService: CreateEWSProviderMailServiceInput!,

	# Agenda service for the EWS account.
	agendaService: AgendaServiceInput!
}

input CreateGetmailRemoteAccountRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# IMAP credentials data.
	imapCredentials: CreateRemoteAccountCredentialsInput!,

	# SMTP account data. Unset if null.
	smtpAccount: CreateGetmailSmtpAccountInput # ToDo: Check. If null, legacy Getmail will be used instead.
}

input DeleteRemoteAccountRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}

input AlterEWSRemoteAccountContactServiceRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Contact service data for the EWS account.
	contactService: ContactServiceInput!
}

input AlterEWSRemoteAccountMailServiceRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Mail service data for the EWS account.
	mailService: AlterEWSMailServiceInput!
}

input AlterEWSProviderRemoteAccountMailServiceRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Mail service data for the EWS account.
	mailService: AlterEWSProviderMailServiceInput!
}

input AlterEWSRemoteAccountAgendaServiceRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Agenda service for the EWS account.
	agendaService: AgendaServiceInput!	
}

input AlterEWSRemoteAccountCredentialsRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# EWS credentials data.
	credentials: AlterRemoteAccountCredentialsInput
}

input AlterEWSRemoteAccountHostRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# EWS host data.
	ewsHost: AlterRemoteAccountHostInput!,

	# True if SSL is required by the EWS host.
	isSsl: Boolean
}

input AlterGoogleRemoteAccountCredentialsRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Username provided for OAuth.
	username: String,

	# Last refresh token provided by OAuth.
	refreshToken: String
}

input AlterGetmailRemoteAccountImapCredentialsRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# IMAP credentials data.
	imapCredentials: AlterRemoteAccountCredentialsInput!
}

input AlterGetmailRemoteAccountSmtpCredentialsRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# SMTP credentials for the Getmail account to set.
	smtpCredentials: AlterRemoteAccountCredentialsInput!
}

input AlterRemoteAccountBaseInfoRequest {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Base information for the remote account.
	baseInfo: AlterRemoteAccountBaseInfoInput!
}

input SetMainRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}

input SortRemoteAccountsInput {
	# List of remote account sort order to set.
	remoteAccounts: [SortRemoteAccountInput!]!
}

input SortRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# New sort priority to set for the remote account. Accounts are displayed in ascending order.
	priority: Int!
}

type CreateRemoteAccountResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# Data of the remote account created.
	remoteAccount: RemoteAccount!
}

type DeleteRemoteAccountResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# True if account deletion succeeded.
	success: bool!
}

type SortRemoteAccountsResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# Dataset of all remote accounts affected by the sorting. All the accounts owned by the sorted remote account owner will be returned.
	remoteAccounts: [RemoteAccount!]!
}


#
# -- MUTATIONS
type Mutation {
	# Creates a new Google remote account.
	createGoogleRemoteAccount(input: CreateGoogleRemoteAccountRequest!): CreateRemoteAccountResponse!,

	# Creates a new Exchange Web Services remote account.
	createEWSRemoteAccount(input: CreateEWSRemoteAccountRequest!): CreateRemoteAccountResponse!,

	# Creates a new Exchange Web Services remote account bound to a provider (Outlook or Office365).
	createEWSProviderRemoteAccount(input: CreateEWSProviderRemoteAccountRequest!): CreateRemoteAccountResponse!,

	# Creates a new Getmail remote account.
	createGetmailRemoteAccount(input: CreateGetmailRemoteAccountRequest!): CreateRemoteAccountResponse!,

	# Deletes a remote account.
	deleteRemoteAccount(input: DeleteRemoteAccountRequest!): DeleteRemoteAccountResponse!,

	# Alters an EWS remote account contact service. This supports provider accounts.
	alterEWSRemoteAccountContactService(input: AlterEWSRemoteAccountContactServiceRequest!): UpdateRemoteAccountResponse!,

	# Alters an EWS remote account mail service. This does not support provider accounts (use alterEWSProviderRemoteAccountMailService instead).
	alterEWSRemoteAccountMailService(input: AlterEWSRemoteAccountMailServiceRequest!): UpdateRemoteAccountResponse!,

	# Alters an EWS provider mail service. Use alterEWSRemoteAccountMailService for non-provider accounts.
	alterEWSProviderRemoteAccountMailService(input: AlterEWSProviderRemoteAccountMailServiceRequest!): UpdateRemoteAccountResponse!,

	# Alters an EWS agenda service. This supports provider accounts.
	alterEWSRemoteAccountAgendaService(input: AlterEWSRemoteAccountAgendaServiceRequest!): UpdateRemoteAccountResponse!,

	# Alters an EWS credentials. This supports provider accounts.
	alterEWSRemoteAccountCredentials(input: AlterEWSRemoteAccountCredentialsRequest!): UpdateRemoteAccountResponse!,

	# Alters an EWS host. This does not support provider accounts.
	alterEWSRemoteAccountHost(input: AlterEWSRemoteAccountHostRequest!): UpdateRemoteAccountResponse!,

	# Alters a Google remote account credentials.
	alterGoogleRemoteAccountCredentials(input: AlterGoogleRemoteAccountCredentialsRequest!): UpdateRemoteAccountResponse!,

	# Alters a Getmail IMAP credentials.
	alterGetmailRemoteAccountImapCredentials(input: AlterGetmailRemoteAccountImapCredentialsRequest!): UpdateRemoteAccountResponse!,

	# Alters a Getmail SMTP credentials.
	alterGetmailRemoteAccountSmtpCredentials(input: AlterGetmailRemoteAccountSmtpCredentialsRequest!): UpdateRemoteAccountResponse!,

	# Alters any remote account base information.
	alterRemoteAccountBaseInfo(input: AlterRemoteAccountBaseInfoRequest!): UpdateRemoteAccountResponse!,

	# Sets a remote account as the main account for its owner.
	setMainRemoteAccount(input: SetMainRemoteAccountInput!): UpdateRemoteAccountResponse!,

	# Sets the sort value for one or many accounts for a user.  All accounts must belong to the same user. Returns the final sort values for all user accounts.
	sortRemoteAccounts(input: SortRemoteAccountsInput!): SortRemoteAccountsResponse!
}