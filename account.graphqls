

enum RemoteAccountType {
	GOOGLE,
	EXCHANGE,
	OFFICE365,
	OUTLOOK,
	GETMAIL
}

enum GetmailAccountType {
	POP3,
	POP3SSL,
	IMAP,
	IMAPSSL
}

enum SmtpEncryptionTypes {
	NONE,
	TLS,
	SSL
}

# ToDo: Reimplemented, remove on merge.
interface Node {
	id: ID!
}

type User implements Node {
	id: ID!
}

type RemoteAccount implements Node {
	id: ID!,

	# Remote account type.
	type: RemoteAccountType!,

	# Description provided for the remote account.
	description: String,

	# True if the remote account is currently the main one.
	isMain: Boolean!,

	# Sort order priority of the remote account. Accounts are displayed in ascending order.
	priority: Int,

	# EWS or GMail API Host.
	host: String,

	# Email attributed to the remote account.
	email: String,

	# User login for the remote account.
	userLogin: String,

	# Display name for the remote account.
	userDisplayName: String,

	# Contact account linked to this remote account.
	contactAccount: ContactAccount!,

	# Agenda account linked to this remote account.
	agendaAccount: AgendaAccount!,

	# Mail account linked to this remote account.
	mailAccount: MailAccount!,

	# Webuser owner of this remote account.
	owner: User
}

type AgendaAccount {
	# True if the agenda account is enabled.
	enabled: Boolean!,

	# True if invitations management is enabled.
	invitationEnabled: Boolean!
}

type ContactAccount {
	# True if the contact account is enabled.
	enabled: Boolean!,

	# True if the contact addresses are to be synced with the local CRM data.
	syncAddresses: Boolean!,

	# True if the contact emails are to be synced with the local CRM data.
	syncEmails: Boolean!,

	# True if the contact phones are to be synced with the local CRM data.
	syncPhones: Boolean!
}

type MailAccount {
	# True if the mail account is enabled.
	enabled: Boolean!,

	# INCOMING

	# Remote IMAP mail account.
	imap: ImapAccount,

	# Deprecated Getmail/POP3 account informations.
	getmail: GetmailAccount,

	# OUTGOING

	# Email used as the source when sending emails.
	replyTo: String,

	# SMTP account parameters.
	smtp: SmtpAccount,

	# True if the SPF record is valid.
	hasSpf: Boolean!
}

type ImapAccount {
	# IMAP server host.
	host: String!,

	# IMAP server port.
	port: Int!,

	# True if SSL is required by the IMAP server.
	isSsl: Boolean!,

	# Username for connecting to the IMAP server.
	userLogin: String!
}

type GetmailAccount {
	# True if the Getmail account is enabled.
	enabled: Boolean!,

	# Type of Getmail account.
	type: GetmailAccountType!,

	# Getmail server host.
	host: String!,

	# Getmail server port.
	port: Int!,

	# Username for connecting to the Getmail server.
	userLogin: String!,

	# True if mails are to be automatically cleaned up every X days.
	remoteDelete: Boolean!,

	# Days before an email is deleted remotely. This feature is only active if remoteDelete is true.
	remoteDeleteAfter: Int,

	# True if spam is to be filtered by the Getmail server, as well as the remote server.
	filterSpam: Boolean!
}

type SmtpAccount {
	# SMTP server host.
	host: String!,

	# SMTP server port.
	port: Int!,

	# Username for connecting to the SMTP server.
	userLogin: String!,

	# Encryption method required by the SMTP server.
	encryptionType: SmtpEncryptionTypes!
}

input RemoteAccountsFilters {
	# Specific webuser owner ID to filter by.
	ownerId: ID
}


input CreateRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Remote account type.
	type: RemoteAccountType!,

	# EWS or GMail API Host.
	host: String,

	# Email attributed to the remote account.
	email: String!,

	# Display name for the remote account.
	userDisplayName: String!,

	# Credentials used for the remote account.
	credentials: MixedAccountCredentialsInput!,

	# If not provided the description will be automatically generated from the remote account type and email.
	description: String,

	# Webuser owner ID of this remote account.
	ownerId: ID!
}

type CreateRemoteAccountResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# Newly created remote account.
	remoteAccount: RemoteAccount!
}

input UpdateRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# EWS or GMail API Host.
	host: String,

	# Email attributed to the remote account.
	email: String,

	# Display name for the remote account.
	userDisplayName: String!,

	# Description for the remote account.
	description: String
}

type UpdateRemoteAccountResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# Updated remount account.
	remoteAccount: RemoteAccount!
}

input UpdateRemoteAccountCredentialsInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,
	credentials: AccountCredentialsInput
}

input ContactAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# True if the contact addresses are to be synced with the local CRM data.
	syncAddresses: Boolean,

	# True if the contact emails are to be synced with the local CRM data.
	syncEmails: Boolean,

	# True if the contact phones are to be synced with the local CRM data.
	syncPhones: Boolean
}

input AgendaAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# True if invitations management is enabled.
	invitationEnabled: Boolean
}

input EnableImapMailAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# IMAP account data.
	imap: ImapAccountInput,

	# Email used as the source when sending emails.
	replyTo: String,

	# ToDo: Truncate.
	# SMTP account data.
	smtp: SmtpAccountInput
}

input EnableGetmailMailAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Getmail account data.
	getmail: GetmailAccountInput,

	# ToDo: Truncate.
	# SMTP account data.
	smtp: SmtpAccountInput
}


input UpdateImapMailAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# IMAP account data.
	imap: ImapAccountInput!
}

input UpdateGetmailMailAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# Getmail account data.
	getmail: GetmailAccountInput!,

	# Email used as the source when sending emails.
	replyTo: String
}

input UpdateMailAccountSmtpInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# SMTP account data.
	smtp: SmtpAccountInput!
}

input MixedAccountCredentialsInput {
	# Login username to set.
	userLogin: String!,

	# Login password to set.
	userPassword: String,

	# OAuth refresh token to set.
	oauth2RefreshToken: String
}

input UserPassAccountCredentialsInput {
	# Login username to set.
	userLogin: String!,

	# Login password to set.
	userPassword: String
}

input SmtpAccountInput {
	# SMTP server host.
	host: String!,

	# SMTP server port. At creation, by default, sets itself to the specified encryption ports. None is 25, SSL is 465, and TLS is 587.
	port: Int,

	# Encryption method required by the SMTP server.
	encryption: SmtpEncryptionTypes!
}

input ImapAccountInput {
	# SMTP server host.
	host: String!,

	# SMTP server port. Without SSL, defaults to 25; with SSL, defaults to 587.
	port: Int,

	# True if SSL is required by the SMTP server. Defaults to true.
	isSsl: Boolean,

	# Email used as the source when sending emails.
	replyTo: String
}

input GetmailAccountInput {
	# True if Getmail is to be enabled. By default, remains unchanged.
	enabled: Boolean,

	# Type of Getmail account.
	type: GetmailAccountType,

	# Getmail server host.
	host: String,

	# Getmail server port.
	port: Int,

	# True if mails are to be automatically cleaned up every X days.
	remoteDelete: Boolean,

	# Days before an email is deleted remotely. This feature is only active if remoteDelete is true.
	remoteDeleteAfter: Int,

	# True if spam is to be filtered by the Getmail server, as well as the remote server.
	filterSpam: Boolean
}

input SetMainRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}

input SortRemoteAccountsInput {
	# List of remote account sort order to set.
	remoteAccounts: [SortRemoteAccountInput!]!
}

input SortRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!,

	# New sort priority to set for the remote account. Accounts are displayed in ascending order.
	sortValue: Int!
}

type SortRemoteAccountsResponse {
	# Mutation ID initially provided to the input mutation, or null if not provided.
	clientMutationId: String,

	# Dataset of all remote accounts affected by the sorting. All the accounts owned by the sorted remote account owner will be returned.
	remoteAccounts: [RemoteAccount!]!
}

input DeleteRemoteAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}

input DisableContactAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}

input DisableAgendaAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}

input DisableMailAccountInput {
	# Local mutation ID to aid with synchronization. This is unused by the server and will be sent back as is when the query is complete.
	clientMutationId: String,

	# Affected remote account ID.
	remoteAccountId: ID!
}


type Query {
	# ToDo: Reimplemented, remove on merge.
	# Requests a single node.
	node(id: ID!): Node,

	# ToDo: Extend to Node/Edge.
	# Requests multiple remote accounts.
	remoteAccounts(filters: RemoteAccountsFilters): [RemoteAccount!]!

}

type Mutation {
	# Creates a new remote account.
	createRemoteAccount(input: CreateRemoteAccountInput!): CreateRemoteAccountResponse,

	# Updates remote account global fields.
	updateRemoteAccount(input: UpdateRemoteAccountInput!): UpdateRemoteAccountResponse,

	# Sets the global login and password for the remote account.
	updateRemoteAccountCredentials(input: MixedAccountCredentialsInput!): UpdateRemoteAccountResponse,

	# Deletes a remote account.
	deleteRemoteAccount(input: DeleteRemoteAccountInput!): UpdateRemoteAccountResponse,

	# Enables contact integration for a remote account.
	enableContactAccount(input: ContactAccountInput!): UpdateRemoteAccountResponse,

	# Updates contact parameters for a remote account.
	updateContactAccount(input: ContactAccountInput!): UpdateRemoteAccountResponse,

	# Disables contact integration for a remote account.
	disableContactAccount(input: DisableContactAccountInput!): UpdateRemoteAccountResponse,

	# Enables agenda/calendar integration for a remote account.
	enableAgendaAccount(input: AgendaAccountInput!): UpdateRemoteAccountResponse,

	# Updates agenda/calendar parameters for a remote account.
	updateAgendaAccount(input: AgendaAccountInput!): UpdateRemoteAccountResponse,

	# Disables agenda/calendar integration for a remote account.
	disableAgendaAccount(input: DisableAgendaAccountInput!): UpdateRemoteAccountResponse,

	# Enables an IMAP based mail account for the remote account. Use with GOOGLE, EXCHANGE, OFFICE365 and OUTLOOK accounts.
	enableImapMailAccount(input: EnableImapMailAccountInput!): UpdateRemoteAccountResponse,

	# Updates IMAP based mail account parameters for the remote account.
	updateImapMailAccount(input: UpdateImapMailAccountInput!): UpdateRemoteAccountResponse,

	# Enables a Getmail/POP3 based mail account for the remote account. Use with GETMAIL accounts
	enableGetmailMailAccount(input: EnableGetmailMailAccountInput!): UpdateRemoteAccountResponse,

	# Updates Getmail/POP3 based mail account parameters for the remote account.
	updateGetmailMailAccount(input: UpdateGetmailMailAccountInput!): UpdateRemoteAccountResponse,

	# Sets or updates custom SMTP parameters for a remote account.
	updateMailAccountSmtp(input: UpdateMailAccountSmtpInput!): UpdateRemoteAccountResponse,

	# Updates custom SMTP login and password for a remote account.
	updateMailAccountSmtpCredentials(input: UserPassAccountCredentialsInput!): UpdateRemoteAccountResponse,

	# Disables mail integration for a remote account.
	disableMailAccount(input: DisableMailAccountInput!): UpdateRemoteAccountResponse,

	# Sets a remote account as the main account for its owner.
	setMainRemoteAccount(input: SetMainRemoteAccountInput!): UpdateRemoteAccountResponse,

	# Sets the sort value for one or many accounts for a user.  All accounts must belong to the same user. Returns the final sort values for all user accounts.
	sortRemoteAccounts(input: SortRemoteAccountsInput!): SortRemoteAccountsResponse

}
