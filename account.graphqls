

enum RemoteAccountType {
	GOOGLE,
	EXCHANGE,
	OFFICE365,
	OUTLOOK,
	GETMAIL
}

enum GetmailAccountType {
	POP3,
	POP3SSl,
	IMAP,
	IMAPSSL
}

enum SmtpEncryptionTypes {
	NONE,
	TLS,
	SSL
}


interface Node {
	id: ID!
}

type User implements Node {
	id: ID!,
}

type RemoteAccount implements Node {
	id: ID!,
	type: RemoteAccountType!
	description: String,
	isMain: Boolean,
	priority: Int,

	# EWS or Gmail API Host
	host: String,
	email: String,
	userLogin: String,
	userDisplayName: String,
	contactAccount: ContactAccount!,
	agendaAccount: AgendaAccount!,
	mailAccount: MailAccount!,
	owner: User
}

type AgendaAccount {
	enabled: Boolean!,
	invitationEnabled: Boolean
}

type ContactAccount {
	enabled: Boolean!,
	syncAddresses: Boolean,
	syncEmails: Boolean,
	syncPhones: Boolean,
}

type MailAccount {
	enabled: Boolean,
	incoming: IncomingMailOptions,
	outgoing: OutgoingMailOptions,
}

type IncomingMailOptions {

	# Remote imap mail account
	imap: ImapAccount,

	# Deprecated getmail/pop3 account informations
	getmail: GetmailAccount,
}

type OutgoingMailOptions {
	replyTo: String,
	# Custom smtp parameters
	smtp: SmtpAccount,
	# Deprecated
	hasSpf: Boolean,
}

type ImapAccount {
	host: String,
	port: Int,
	isSsl: Boolean,
	userLogin: String,
}

type GetmailAccount {
	enabled: Boolean,
	type: GetmailAccountType,
	host: String,
	port: Int,
	userLogin: String,
	delete: Boolean,
	deleteAfter: Int,
	filterSpam: Boolean,
}

type SmtpAccount {
	host: String!,
	port: Int,
	user: String,
	encryption: SmtpEncryptionTypes,
}

input RemoteAccountsFilters {
	# User ID
	ownerId: ID,
}


input CreateRemoteAccountInput {
	clientMutationId: String,
	type: RemoteAccountType!
	host: String!,
	email: String!,
	userLogin: String!,
	userDisplayName: String!,
	userPassword: String,
	# oauth2RefreshToken: String,
	# If not provided, description is generated
	description: String,
}

input UpdateRemoteAccountInput {
	clientMutationId: String,
	host: String!,
	email: String!,
	userLogin: String!,
	userDisplayName: String!,
	userPassword: String,
	description: String,
}

type CreateUpdateRemoteAccountPayload {
	clientMutationId: String,
	remoteAccount: RemoteAccount,
}

input EnableContactAccountInput {
	remoteAccountId: Id!,
	syncAddresses: Boolean,
	syncEmails: Boolean,
	syncPhones: Boolean,
}

input EnableAgendaAccountInput {
	remoteAccountId: Id!,
	invitationEnabled: Boolean,
}

input EnableMailAccountInput {
	remoteAccountId: Id!,

	incoming: EnableIncomingMailAcountInput,

	outgoing: EnableOutgoingMailAcountInput,
}

input EnableIncomingMailAcountInput {
	imap: EnableImapMailAccountInput,

	getmail: EnableGetmailAccountInput,
}

input EnableOutgoingMailAcountInput {
	replyTo: String,
	smtp: SmtpAccountInput,
}

input SmtpAccountInput {
	host: String!,
	port: Int,
	user: String,
	encryption: SmtpEncryptionTypes,
}

input EnableImapMailAccountInput {
	host: String!,
	port: Int,
	isSsl: Boolean,
	userLogin: String!,
	userPassword: String,
	replyTo: String,
}

input EnableGetmailAccountInput {
	enabled: Boolean,
	type: GetmailAccountType,
	host: String,
	port: Int,
	userLogin: String,
	userPassword: String,
	delete: Boolean,
	deleteAfter: Int,
	filterSpam: Boolean,
}

type Query {
	# Requests a single node
	node(id: ID!): Node

	remoteAccounts(filters: RemoteAccountsFilters): RemoteAccount,

}

type Mutation {

	createRemoteAccount(account: CreateRemoteAccountInput): CreateUpdateRemoteAccountPayload,

	updateRemoteAccount(account: UpdateRemoteAccountInput): CreateUpdateRemoteAccountPayload,

	enableContactAccount(contactAccount: EnableContactAccountInput): RemoteAccount,

	disableContactAccount(remoteAccountId: ID!),

	enableAgendaAccount(agendaAccount: EnableAgendaAccountInput),

	disableAgendaAccount(remoteAccountId: ID!),

	# Enable remote IMAP mail account
	enableMailAccount(mailAccount: EnableMailAccountInput),

	disableAgendaAccount(remoteAccountId: ID!),
}