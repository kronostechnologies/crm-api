

enum RemoteAccountType {
	GOOGLE,
	EXCHANGE,
	OFFICE365,
	OUTLOOK,
	GETMAIL
}

enum GetmailAccountType {
	POP3,
	POP3SSl,
	IMAP,
	IMAPSSL
}

enum SmtpEncryptionTypes {
	NONE,
	TLS,
	SSL
}


interface Node {
	id: ID!
}

type User implements Node {
	id: ID!,
}

type RemoteAccount implements Node {
	id: ID!,
	type: RemoteAccountType!
	description: String,
	isMain: Boolean,
	priority: Int,

	# EWS or Gmail API Host
	host: String,
	email: String,
	userLogin: String,
	userDisplayName: String,
	contactAccount: ContactAccount!,
	agendaAccount: AgendaAccount!,
	mailAccount: MailAccount!,
	owner: User
}

type AgendaAccount {
	enabled: Boolean!,
	invitationEnabled: Boolean
}

type ContactAccount {
	enabled: Boolean!,
	syncAddresses: Boolean,
	syncEmails: Boolean,
	syncPhones: Boolean,
}

type MailAccount {
	enabled: Boolean,

	# INCOMING

	# Remote imap mail account
	imap: ImapAccount,

	# Deprecated getmail/pop3 account informations
	getmail: GetmailAccount,

	# OUTGOING

	replyTo: String,
	# Custom smtp parameters
	smtp: SmtpAccount,
	# Deprecated
	hasSpf: Boolean,
}

type ImapAccount {
	host: String,
	port: Int,
	isSsl: Boolean,
	userLogin: String,
}

type GetmailAccount {
	enabled: Boolean,
	type: GetmailAccountType,
	host: String,
	port: Int,
	userLogin: String,
	remoteDelete: Boolean,
	remoteDeleteAfter: Int,
	filterSpam: Boolean,
}

type SmtpAccount {
	host: String!,
	port: Int,
	userLogin: String,
	encryptionType: SmtpEncryptionTypes,
}

input RemoteAccountsFilters {
	# User ID
	ownerId: ID,
}


input CreateRemoteAccountInput {
	clientMutationId: String,
	type: RemoteAccountType!
	host: String!,
	email: String!,
	userDisplayName: String!,
	credentials: AccountCredentialsInput,
	# If not provided, description is generated
	description: String,
	ownerId: ID!,
}

type CreateRemoteAccountPayload {
	clientMutationId: String,
	remoteAccount: RemoteAccount,
}

input UpdateRemoteAccountInput {
	clientMutationId: String,
	host: String!,
	email: String!,
	userLogin: String!,
	userDisplayName: String!,
	description: String,
}

type UpdateRemoteAccountPayload {
	clientMutationId: String,
	remoteAccountId: ID!,
}

input UpdateRemoteAccountCredentialsInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	credentials: AccountCredentialsInput,
}

input ContactAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	syncAddresses: Boolean,
	syncEmails: Boolean,
	syncPhones: Boolean,
}

input AgendaAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	invitationEnabled: Boolean,
}

input EnableImapMailAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	imap: ImapAccountInput,
	replyTo: String,
	smtp: SmtpAccountInput,
}

input EnableGetmailMailAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	getmail: GetmailAccountInput,
	replyTo: String,
	smtp: SmtpAccountInput,
}


input UpdateImapMailAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	imap: ImapAccountInput!,
	replyTo: String,
}

input UpdateGetmailMailAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	getmail: GetmailAccountInput!,
	replyTo: String,
}

input UpdateMailAccountSmtpInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	smtp: SmtpAccountInput!,
}

input AccountCredentialsInput {
	userLogin: String!,
	userPassword: String,
	oauth2RefreshToken: String,
}

input SmtpAccountInput {
	host: String!,
	port: Int,
	user: String,
	encryption: SmtpEncryptionTypes,
}

input ImapAccountInput {
	host: String!,
	port: Int,
	isSsl: Boolean,
	replyTo: String,
}

input GetmailAccountInput {
	enabled: Boolean,
	type: GetmailAccountType,
	host: String,
	port: Int,
	delete: Boolean,
	deleteAfter: Int,
	filterSpam: Boolean,
}

input SetMainRemoteAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
}

input SortRemoteAccountsInput {
	remoteAccounts: [SortRemoteAccountInput!]!,
}

input SortRemoteAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
	sortValue: Int,
}

type SortRemoteAccountsPayload {
	remoteAccounts: [SortRemoteAccountPayload!]!,
}

type SortRemoteAccountPayload {
	clientMutationId: String,
	remoteAccountId: ID!,
	sortValue: Int,
}

input DeleteRemoteAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
}

input DisableContactAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
}

input DisableAgendaAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
}

input DisableMailAccountInput {
	clientMutationId: String,
	remoteAccountId: ID!,
}


type Query {
	# Requests a single node
	node(id: ID!): Node

	remoteAccounts(filters: RemoteAccountsFilters): RemoteAccount,

}

type Mutation {

	# Create a new remote account
	createRemoteAccount(input: CreateRemoteAccountInput!): CreateRemoteAccountPayload,

	# Update remote account global fields
	updateRemoteAccount(input: UpdateRemoteAccountInput!): UpdateRemoteAccountPayload,

	# Set the global login and password for the remote account
	updateRemoteAccountCredentials(input: UpdateRemoteAccountCredentialsInput!): UpdateRemoteAccountPayload,

	# Delete a remote account
	deleteRemoteAccount(input: DeleteRemoteAccountInput!): UpdateRemoteAccountPayload,

	# Enable contact integration for a remote account
	enableContactAccount(input: ContactAccountInput!): UpdateRemoteAccountPayload,

	# Update contact parameters for a remote account
	updateContactAccount(input: ContactAccountInput!): UpdateRemoteAccountPayload,

	# Disable contact integration for a remote account
	disableContactAccount(input: DisableContactAccountInput!): UpdateRemoteAccountPayload,

	# Enable agenda/calendar integration for a remote account
	enableAgendaAccount(input: AgendaAccountInput!): UpdateRemoteAccountPayload,

	# Update agenda/calendar parameters for a remote account
	updateAgendaAccount(input: AgendaAccountInput!): UpdateRemoteAccountPayload,

	# Disable agenda/calendar integration for a remote account
	disableAgendaAccount(input: DisableAgendaAccountInput!): UpdateRemoteAccountPayload,

	# Enable a IMAP based mail account for the remote account. Use with GOOGLE, EXCHANGE, OFFICE365 and OUTLOOK accounts
	enableImapMailAccount(input: EnableImapMailAccountInput!): UpdateRemoteAccountPayload,

	# Update IMAP based mail account parameters for remote account
	updateImapMailAccount(input: UpdateImapMailAccountInput!): UpdateRemoteAccountPayload,

	# Enable a Getmail/POP3 based mail account for the remote account. Use with GETMAIL accounts
	enableGetmailMailAccount(input: EnableGetmailMailAccountInput!): UpdateRemoteAccountPayload,

	# Update Getmail/POP3 based mail account parameters for remote account
	updateGetmailMailAccount(input: UpdateGetmailMailAccountInput!): UpdateRemoteAccountPayload,

	# Set or update custom smtp parameters for a remote account
	updateMailAccountSmtp(input: UpdateMailAccountSmtpInput!): UpdateRemoteAccountPayload,

	# Update custom smtp login and password for a remote acount
	updateMailAccountSmtpCredentials(input: UpdateRemoteAccountCredentialsInput!): UpdateRemoteAccountPayload,

	# Disable mail integration for a remote account
	disableMailAccount(input: DisableMailAccountInput!): UpdateRemoteAccountPayload,

	# Set a remote accont as the main account for it's owner
	setMainRemoteAccount(input: SetMainRemoteAccountInput!): UpdateRemoteAccountPayload,

	# Set the sort value for one or many accounts for a user.  All accounts must belong to the same user.
	# Returns the final sort values for all user accounts
	sortRemoteAccounts(input: SortRemoteAccountsInput!): SortRemoteAccountsPayload,

}
